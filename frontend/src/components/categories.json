// components/Navbar.js
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar = () => {
  return (
    <nav className="bg-blue-600 text-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <Link to="/" className="flex-shrink-0 text-xl font-bold">
              Duckle
            </Link>
            <div className="ml-10 flex items-baseline space-x-4">
              <Link to="/" className="px-3 py-2 rounded-md hover:bg-blue-700">
                Transactions
              </Link>
              <Link to="/categories" className="px-3 py-2 rounded-md hover:bg-blue-700">
                Categories
              </Link>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;

// components/FileUpload.js
import React, { useState } from 'react';

const FileUpload = ({ onUpload, loading }) => {
  const [file, setFile] = useState(null);
  const [message, setMessage] = useState('');

  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const handleUpload = async () => {
    if (!file) {
      setMessage('Please select a file');
      return;
    }
    
    setMessage('Uploading...');
    const result = await onUpload(file);
    
    if (result && result.error) {
      setMessage(`Error: ${result.error}`);
    } else if (result && result.message) {
      setMessage(result.message);
      // Clear file input
      setFile(null);
      document.getElementById('file-input').value = '';
    }
  };

  return (
    <div className="flex flex-col space-y-2 sm:flex-row sm:space-y-0 sm:space-x-2 items-center">
      <input
        id="file-input"
        type="file"
        accept=".pdf"
        onChange={handleFileChange}
        className="border p-2 rounded"
      />
      <button
        onClick={handleUpload}
        disabled={!file || loading}
        className={`px-4 py-2 rounded-md ${
          loading || !file
            ? 'bg-gray-400 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700 text-white'
        }`}
      >
        {loading ? 'Processing...' : 'Upload PDF'}
      </button>
      {message && (
        <span className="text-sm text-gray-600 ml-2">{message}</span>
      )}
    </div>
  );
};

export default FileUpload;

// components/TransactionsTable.js
import React, { useState, useEffect } from 'react';
import CategorySelector from './CategorySelector';

const TransactionsTable = ({ transactions, loading, onCategoryUpdate }) => {
  const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'ascending' });
  const [sortedTransactions, setSortedTransactions] = useState([]);

  useEffect(() => {
    let sorted = [...transactions];
    if (sortConfig.key) {
      sorted.sort((a, b) => {
        let aValue = a[sortConfig.key];
        let bValue = b[sortConfig.key];

        // Handle numeric values
        if (['amount', 'balance'].includes(sortConfig.key)) {
          aValue = parseFloat(aValue);
          bValue = parseFloat(bValue);
        }
        
        // Handle date values
        if (sortConfig.key === 'date') {
          aValue = new Date(aValue);
          bValue = new Date(bValue);
        }

        if (aValue < bValue) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (aValue > bValue) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    setSortedTransactions(sorted);
  }, [transactions, sortConfig]);

  const requestSort = (key) => {
    let direction = 'ascending';
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  const handleCategoryChange = async (transactionId, category) => {
    // Handle category updates with subcategory support
    let mainCategory = category;
    let subcategory = category;
    
    if (category.includes(' -> ')) {
      [mainCategory, subcategory] = category.split(' -> ');
    }
    
    await onCategoryUpdate(transactionId, mainCategory, subcategory);
  };

  if (loading) {
    return <div className="text-center py-4">Loading transactions...</div>;
  }

  if (!transactions.length) {
    return (
      <div className="text-center py-4 border rounded-lg bg-gray-100">
        No transactions found. Upload a bank statement to get started.
      </div>
    );
  }

  return (
    <div className="overflow-x-auto shadow-md rounded-lg">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            {['Date', 'Type', 'Details', 'Amount', 'Balance', 'Category'].map((header) => {
              const key = header.toLowerCase();
              return (
                <th
                  key={header}
                  onClick={() => requestSort(key === 'type' ? 'withdrawal_or_deposit' : key)}
                  className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
                >
                  <div className="flex items-center">
                    {header}
                    {sortConfig.key === (key === 'type' ? 'withdrawal_or_deposit' : key) && (
                      <span className="ml-1">
                        {sortConfig.direction === 'ascending' ? '↑' : '↓'}
                      </span>
                    )}
                  </div>
                </th>
              );
            })}
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {sortedTransactions.map((transaction) => (
            <tr 
              key={transaction.id}
              className={transaction.withdrawal_or_deposit === 'Deposit' ? 'bg-green-50' : ''}
            >
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {transaction.date}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {transaction.withdrawal_or_deposit}
              </td>
              <td className="px-6 py-4 text-sm text-gray-900">
                <div className="max-w-md truncate" title={transaction.details}>
                  {transaction.details}
                </div>
              </td>
              <td className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${
                transaction.withdrawal_or_deposit === 'Deposit' 
                  ? 'text-green-600' 
                  : 'text-red-600'
              }`}>
                ${typeof transaction.amount === 'number' 
                  ? transaction.amount.toFixed(2) 
                  : parseFloat(transaction.amount).toFixed(2)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${typeof transaction.balance === 'number' 
                  ? transaction.balance.toFixed(2) 
                  : parseFloat(transaction.balance).toFixed(2)}
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <CategorySelector
                  transactionId={transaction.id}
                  currentCategory={transaction.category}
                  currentSubcategory={transaction.subcategory}
                  onCategoryChange={handleCategoryChange}
                />
              </td>
              <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button className="text-blue-600 hover:text-blue-900">
                  View
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TransactionsTable;

// components/CategorySelector.js
import React, { useState, useEffect } from 'react';

const CategorySelector = ({ transactionId, currentCategory, currentSubcategory, onCategoryChange }) => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch('http://localhost:5000/api/categories');
        if (response.ok) {
          const data = await response.json();
          setCategories(data);
        }
      } catch (error) {
        console.error('Failed to fetch categories:', error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchCategories();
  }, []);
  
  if (loading) {
    return <span>Loading...</span>;
  }
  
  const displayValue = currentSubcategory && currentSubcategory !== currentCategory 
    ? `${currentCategory} -> ${currentSubcategory}`
    : currentCategory;
  
  return (
    <select
      value={displayValue}
      onChange={(e) => onCategoryChange(transactionId, e.target.value)}
      className="border border-gray-300 rounded px-2 py-1 w-full"
    >
      <option value="">Select Category</option>
      {categories.map((category) => (
        <option key={category} value={category}>
          {category}
        </option>
      ))}
    </select>
  );
};

export default CategorySelector;

// components/Categories.js
import React, { useState, useEffect } from 'react';

const Categories = ({ onAddCategory }) => {
  const [categories, setCategories] = useState([]);
  const [newCategory, setNewCategory] = useState('');
  const [message, setMessage] = useState('');
  
  useEffect(() => {
    fetchCategories();
  }, []);
  
  const fetchCategories = async () => {
    try {
      const response = await fetch('http://localhost:5000/api/categories');
      if (response.ok) {
        const data = await response.json();
        setCategories(data);
      }
    } catch (error) {
      console.error('Failed to fetch categories:', error);
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!newCategory.trim()) {
      setMessage('Category name cannot be empty');
      return;
    }
    
    const result = await onAddCategory(newCategory);
    
    if (result && result.success) {
      setMessage(`Category "${newCategory}" added successfully`);
      setNewCategory('');
      // Refresh categories
      fetchCategories();
    } else if (result && result.error) {
      setMessage(`Error: ${result.error}`);
    }
  };
  
  return (
    <div className="max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Manage Categories</h1>
      
      {/* Add new category form */}
      <div className="bg-white shadow-md rounded-lg p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Add New Category</h2>
        <form onSubmit={handleSubmit} className="flex items-center">
          <input
            type="text"
            value={newCategory}
            onChange={(e) => setNewCategory(e.target.value)}
            className="flex-grow border border-gray-300 rounded-l px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Enter new category name"
          />
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded-r hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Add
          </button>
        </form>
        {message && (
          <p className={`mt-2 text-sm ${message.includes('Error') ? 'text-red-600' : 'text-green-600'}`}>
            {message}
          </p>
        )}
      </div>
      
      {/* Categories list */}
      <div className="bg-white shadow-md rounded-lg p-6">
        <h2 className="text-xl font-semibold mb-4">Available Categories</h2>
        {categories.length === 0 ? (
          <p className="text-gray-500">No categories found</p>
        ) : (
          <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {categories.map((category) => (
              <li 
                key={category} 
                className="bg-gray-100 p-3 rounded shadow-sm"
              >
                {category}
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
};

export default Categories;